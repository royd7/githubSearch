{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  intercept(req, next) {\n    const token = localStorage.getItem('token'); // Retrieve token\n    if (token) {\n      req = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(req);\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,eAAe;EAGxBC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAC9C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAC7C,IAAIF,KAAK,EAAE;MACPF,GAAG,GAAGA,GAAG,CAACK,KAAK,CAAC;QACZC,UAAU,EAAE;UAAEC,aAAa,EAAE,UAAUL,KAAK;QAAE;OACjD,CAAC;;IAEN,OAAOD,IAAI,CAACO,MAAM,CAACR,GAAG,CAAC;EAC3B;EAAC;qBAXQF,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAW,SAAfX,eAAe;EAAA","names":["AuthInterceptor","intercept","req","next","token","localStorage","getItem","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\core\\services\\auth.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor\r\n \r\n{\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const token = localStorage.getItem('token'); // Retrieve token\r\n        if (token) {\r\n            req = req.clone({\r\n                setHeaders: { Authorization: `Bearer ${token}` }\r\n            });\r\n        }\r\n        return next.handle(req);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}