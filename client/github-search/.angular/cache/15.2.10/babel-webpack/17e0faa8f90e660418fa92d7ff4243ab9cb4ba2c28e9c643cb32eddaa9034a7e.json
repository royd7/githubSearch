{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    // Call the login method during service initialization\n  }\n\n  login() {\n    // Simulate a login process and obtain a JWT token from the server\n    return this.http.get(`${environment.apiEndpoint}/token`).subscribe(e => {\n      this.data = e;\n    });\n  }\n  isAuthorized() {\n    // Just check if token exists\n    // It not, user has never logged in current session\n    return Boolean(this.data?.token);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IACtB;EACF;;EAEAC,KAAK;IACH;IACA,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAM,GAAGL,WAAW,CAACM,WAAW,QAAQ,CAAC,CAACC,SAAS,CAACC,CAAC,IAAG;MAC1E,IAAI,CAACC,IAAI,GAAGD,CAAC;IACf,CAAC,CAAC;EACJ;EAEAE,YAAY;IACV;IACA;IACA,OAAOC,OAAO,CAAC,IAAI,CAACF,IAAI,EAAEG,KAAK,CAAC;EAClC;EAAC;qBApBUX,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAY,SAAXZ,WAAW;IAAAa,YAFV;EAAM","names":["environment","UserService","constructor","http","login","get","apiEndpoint","subscribe","e","data","isAuthorized","Boolean","token","factory","providedIn"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, catchError, map, tap } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n\r\n  data: any;\r\n\r\n  constructor(private http: HttpClient) {\r\n    // Call the login method during service initialization\r\n  }\r\n\r\n  login() {\r\n    // Simulate a login process and obtain a JWT token from the server\r\n    return this.http.get<any>(`${environment.apiEndpoint}/token`).subscribe(e => {\r\n      this.data = e;\r\n    });\r\n  }\r\n\r\n  isAuthorized() {\r\n    // Just check if token exists\r\n    // It not, user has never logged in current session\r\n    return Boolean(this.data?.token);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}