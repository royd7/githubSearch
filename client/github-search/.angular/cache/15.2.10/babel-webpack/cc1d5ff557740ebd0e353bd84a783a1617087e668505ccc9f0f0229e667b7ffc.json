{"ast":null,"code":"import _asyncToGenerator from \"C:/projects/githubSearch/client/github-search/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n  }\n  fetchToken() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // Call your API's endpoint to fetch the token\n      if (!localStorage.getItem('access_token')) yield _this.http.get(`${environment.apiEndpoint}/token`).subscribe(e => {\n        localStorage.setItem('access_token', e);\n      });\n      return localStorage.getItem('access_token');\n    })();\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAGA,SAASA,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAExB;EAEMC,UAAU;IAAA;IAAA;MACd;MACA,IAAI,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,EACvC,MAAM,KAAI,CAACH,IAAI,CAACI,GAAG,CAAC,GAAGP,WAAW,CAACQ,WAAW,QAAQ,CAAC,CAACC,SAAS,CAAEC,CAAK,IAAI;QAC1EL,YAAY,CAACM,OAAO,CAAC,cAAc,EAAED,CAAC,CAAC;MACzC,CAAC,CAAC;MAEJ,OAAOL,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAAC;EAC9C;EAAC;qBAfUL,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAW,SAAXX,WAAW;IAAAY,YAFV;EAAM","names":["environment","UserService","constructor","http","fetchToken","localStorage","getItem","get","apiEndpoint","subscribe","e","setItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\core\\services\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  public user: any;\r\n  constructor(private http: HttpClient) {\r\n\r\n  }\r\n\r\n  async fetchToken() {\r\n    // Call your API's endpoint to fetch the token\r\n    if (!localStorage.getItem('access_token'))\r\n      await this.http.get(`${environment.apiEndpoint}/token`).subscribe((e:any) => {\r\n        localStorage.setItem('access_token', e);\r\n      })\r\n\r\n    return localStorage.getItem('access_token');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}