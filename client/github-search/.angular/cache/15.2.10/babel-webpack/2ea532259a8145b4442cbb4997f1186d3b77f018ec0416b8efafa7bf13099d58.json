{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, catchError, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.accessTokenSubject = new BehaviorSubject(null);\n    this.accessToken$ = this.accessTokenSubject.asObservable();\n    const storedToken = localStorage.getItem('access_token');\n  }\n  getToken() {\n    const headers = new HttpHeaders({\n      \"Content-Type\": \"application/json\"\n    });\n    const url = `${environment.apiEndpoint}/token`;\n    return this.http.get(url, {\n      headers: headers\n    }).pipe(tap(data => console.log(\"Data: \" + JSON.stringify(data))), catchError(this.handleError));\n  }\n  handleError(err) {\n    let errorMessage;\n    if (err.error instanceof Error) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occured: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}, body was: ${err.error}`;\n    }\n    console.error(err);\n    return errorMessage;\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAwCA,WAAW,QAAQ,sBAAsB;AAEjF,SAASC,eAAe,EAAcC,UAAU,EAAEC,GAAG,QAAQ,MAAM;AACnE,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,uBAAkB,GAAG,IAAIN,eAAe,CAAgB,IAAI,CAAC;IACrE,iBAAY,GAAG,IAAI,CAACO,kBAAkB,CAACC,YAAY,EAAE;IAInD,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAC1D;EAEAC,QAAQ;IACN,MAAMC,OAAO,GAAG,IAAId,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IACvE,MAAMe,GAAG,GAAG,GAAGX,WAAW,CAACY,WAAW,QAAQ;IAC9C,OAAO,IAAI,CAACT,IAAI,CACbU,GAAG,CAACF,GAAG,EAAE;MAAED,OAAO,EAAEA;IAAO,CAAE,CAAC,CAC9BI,IAAI,CACHf,GAAG,CAACgB,IAAI,IAAIC,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC,CAAC,EACzDjB,UAAU,CAAC,IAAI,CAACsB,WAAW,CAAC,CAC7B;EACL;EAEQA,WAAW,CAACC,GAAsB;IACxC,IAAIC,YAAoB;IACxB,IAAID,GAAG,CAACE,KAAK,YAAYC,KAAK,EAAE;MAC9B;MACAF,YAAY,GAAG,qBAAqBD,GAAG,CAACE,KAAK,CAACE,OAAO,EAAE;KACxD,MAAM;MACL;MACA;MACAH,YAAY,GAAG,yBAAyBD,GAAG,CAACK,MAAM,eAAeL,GAAG,CAACE,KACnE,EAAE;;IAENP,OAAO,CAACO,KAAK,CAACF,GAAG,CAAC;IAClB,OAAOC,YAAY;EACrB;EAAC;qBAlCUrB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAA0B,SAAX1B,WAAW;IAAA2B,YAFV;EAAM","names":["HttpHeaders","BehaviorSubject","catchError","tap","environment","UserService","constructor","http","accessTokenSubject","asObservable","storedToken","localStorage","getItem","getToken","headers","url","apiEndpoint","get","pipe","data","console","log","JSON","stringify","handleError","err","errorMessage","error","Error","message","status","factory","providedIn"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\core\\services\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, catchError, tap } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  private accessTokenSubject = new BehaviorSubject<string | null>(null);\r\n  accessToken$ = this.accessTokenSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n\r\n    const storedToken = localStorage.getItem('access_token');\r\n  }\r\n\r\n  getToken(): Observable<any> {\r\n    const headers = new HttpHeaders({ \"Content-Type\": \"application/json\" });\r\n    const url = `${environment.apiEndpoint}/token`;\r\n    return this.http\r\n      .get(url, { headers: headers })\r\n      .pipe(\r\n        tap(data => console.log(\"Data: \" + JSON.stringify(data))),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(err: HttpErrorResponse) {\r\n    let errorMessage: string;\r\n    if (err.error instanceof Error) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      errorMessage = `An error occured: ${err.error.message}`;\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      errorMessage = `Backend returned code ${err.status}, body was: ${err.error\r\n        }`;\r\n    }\r\n    console.error(err);\r\n    return errorMessage;\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}