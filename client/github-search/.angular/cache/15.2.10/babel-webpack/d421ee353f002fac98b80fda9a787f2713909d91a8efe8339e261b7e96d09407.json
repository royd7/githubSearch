{"ast":null,"code":"import { switchMap, take } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nexport class AuthInterceptor {\n  constructor(userService) {\n    this.userService = userService;\n  }\n  intercept(request, next) {\n    return this.userService.getActivate().pipe(take(1), switchMap(token => {\n      if (token) {\n        const clonedRequest = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        return next.handle(clonedRequest);\n      } else {\n        // If token is not available, proceed with the original request\n        return next.handle(request);\n      }\n    }));\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.UserService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAiCA,SAAS,EAAEC,IAAI,QAAa,MAAM;;;AAKnE,OAAM,MAAOC,eAAe;EAExBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAC/B;EAEAC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IAClD,OAAO,IAAI,CAACH,WAAW,CAACI,WAAW,EAAE,CAACC,IAAI,CACtCR,IAAI,CAAC,CAAC,CAAC,EACPD,SAAS,CAAEU,KAAK,IAAI;MAChB,IAAIA,KAAK,EAAE;QACP,MAAMC,aAAa,GAAGL,OAAO,CAACM,KAAK,CAAC;UAChCC,UAAU,EAAE;YAAEC,aAAa,EAAE,UAAUJ,KAAK;UAAE;SACjD,CAAC;QACF,OAAOH,IAAI,CAACQ,MAAM,CAACJ,aAAa,CAAC;OACpC,MAAM;QACH;QACA,OAAOJ,IAAI,CAACQ,MAAM,CAACT,OAAO,CAAC;;IAEnC,CAAC,CAAC,CACL;EACL;EAAC;qBApBQJ,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAc,SAAfd,eAAe;EAAA","names":["switchMap","take","AuthInterceptor","constructor","userService","intercept","request","next","getActivate","pipe","token","clonedRequest","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\src\\app\\services\\auth-interceptor.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable, Injector } from \"@angular/core\";\r\nimport { Observable, catchError, switchMap, take, tap } from \"rxjs\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { UserService } from \"./user.service\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    constructor(private userService: UserService) {\r\n    }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return this.userService.getActivate().pipe(\r\n            take(1),\r\n            switchMap((token) => {\r\n                if (token) {\r\n                    const clonedRequest = request.clone({\r\n                        setHeaders: { Authorization: `Bearer ${token}` },\r\n                    });\r\n                    return next.handle(clonedRequest);\r\n                } else {\r\n                    // If token is not available, proceed with the original request\r\n                    return next.handle(request);\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}