{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet AuthGuard = class AuthGuard {\n  constructor(router, accountService) {\n    this.router = router;\n    this.accountService = accountService;\n  }\n  canActivate(route, state) {\n    const account = this.accountService.accountValue;\n    if (account) {\n      // logged in so return true\n      return true;\n    }\n    // not logged in so redirect to login page with the return url\n    this.router.navigate(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false;\n  }\n};\nAuthGuard = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthGuard);\nexport { AuthGuard };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAMnC,IAAMC,SAAS,GAAf,MAAMA,SAAS;EAClBC,YACYC,MAAc,EACdC,cAA2B;IAD3B,WAAM,GAAND,MAAM;IACN,mBAAc,GAAdC,cAAc;EACtB;EAEJC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACjE,MAAMC,OAAO,GAAG,IAAI,CAACJ,cAAc,CAACK,YAAY;IAChD,IAAID,OAAO,EAAE;MACT;MACA,OAAO,IAAI;;IAGf;IACA,IAAI,CAACL,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAEL,KAAK,CAACM;MAAG;IAAE,CAAE,CAAC;IAC3E,OAAO,KAAK;EAChB;CACH;AAjBYZ,SAAS,eADrBD,UAAU,CAAC;EAAEc,UAAU,EAAE;AAAM,CAAE,CAAC,GACtBb,SAAS,CAiBrB;SAjBYA,SAAS","names":["Injectable","AuthGuard","constructor","router","accountService","canActivate","route","state","account","accountValue","navigate","queryParams","returnUrl","url","providedIn"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\src\\app\\_helpers\\auth-guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { UserService } from 'core/services/user.service';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n    constructor(\r\n        private router: Router,\r\n        private accountService: UserService\r\n    ) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n        const account = this.accountService.accountValue;\r\n        if (account) {\r\n            // logged in so return true\r\n            return true;\r\n        }\r\n\r\n        // not logged in so redirect to login page with the return url\r\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\r\n        return false;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}