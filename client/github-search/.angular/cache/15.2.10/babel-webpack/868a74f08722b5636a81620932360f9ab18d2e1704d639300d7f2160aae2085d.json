{"ast":null,"code":"import _asyncToGenerator from \"C:/projects/githubSearch/client/github-search/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const isAuth = _this.authService.isAuthorized();\n      if (!isAuth) {\n        yield _this.authService.login().subscribe(e => {\n          return e.token;\n        });\n      }\n      return _this.authService.isAuthorized();\n    })();\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac\n  });\n}","map":{"version":3,"mappings":";;;;AAKA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAY;EAElEC,WAAW,CACfC,KAA6B,EAAEC,KAA0B;IAAA;IAAA;MAEzD,MAAMC,MAAM,GAAG,KAAI,CAACL,WAAW,CAACM,YAAY,EAAE;MAC9C,IAAI,CAACD,MAAM,EAAE;QACX,MAAM,KAAI,CAACL,WAAW,CAACO,KAAK,EAAE,CAACC,SAAS,CAAEC,CAAM,IAAI;UAClD,OAAOA,CAAC,CAACC,KAAK;QAChB,CAAC,CAAC;;MAEJ,OAAO,KAAI,CAACV,WAAW,CAACM,YAAY,EAAE;IAAC;EACzC;EAAC;qBAdUR,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAa,SAATb,SAAS;EAAA","names":["AuthGuard","constructor","authService","router","canActivate","route","state","isAuth","isAuthorized","login","subscribe","e","token","factory"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\src\\app\\services\\auth.guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { UserService } from './user.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(private authService: UserService, private router: Router) { }\r\n\r\n  async canActivate(\r\n    route: ActivatedRouteSnapshot, state: RouterStateSnapshot,\r\n  ) {\r\n    const isAuth = this.authService.isAuthorized();\r\n    if (!isAuth) {\r\n      await this.authService.login().subscribe((e: any) => {\r\n        return e.token;\r\n      });\r\n    }\r\n    return this.authService.isAuthorized();\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}