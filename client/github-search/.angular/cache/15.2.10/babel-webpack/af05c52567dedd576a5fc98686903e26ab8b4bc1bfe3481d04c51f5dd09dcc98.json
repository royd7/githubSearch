{"ast":null,"code":"import _asyncToGenerator from \"C:/projects/githubSearch/client/github-search/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { catchError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n  }\n  getToken() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!localStorage.getItem(\"access_token\")) return yield _this.http.get(`${environment.apiEndpoint}/token`).subscribe(e => {\n        console.log(\"Data: \", e);\n        localStorage.setItem(\"access_token\", e);\n      }), catchError(_this.handleError);\n      return localStorage.getItem(\"access_token\");\n    })();\n  }\n  handleError(err) {\n    let errorMessage;\n    if (err.error instanceof Error) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occured: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}, body was: ${err.error}`;\n    }\n    console.error(err);\n    return errorMessage;\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAEA,SAAsCA,UAAU,QAAa,MAAM;AACnE,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EACxB;EAEMC,QAAQ;IAAA;IAAA;MACZ,IAAI,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,EACvC,OAAO,MAAM,KAAI,CAACH,IAAI,CAACI,GAAG,CAAC,GAAGP,WAAW,CAACQ,WAAW,QAAQ,CAAC,CAACC,SAAS,CAAEC,CAAM,IAAI;QAClFC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,CAAC,CAAC;QACxBL,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEH,CAAC,CAAC;MACzC,CAAC,CAAC,EACAX,UAAU,CAAC,KAAI,CAACe,WAAW,CAAC;MAEhC,OAAOT,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAAA;EAC7C;EAEQQ,WAAW,CAACC,GAAsB;IACxC,IAAIC,YAAoB;IACxB,IAAID,GAAG,CAACE,KAAK,YAAYC,KAAK,EAAE;MAC9B;MACAF,YAAY,GAAG,qBAAqBD,GAAG,CAACE,KAAK,CAACE,OAAO,EAAE;KACxD,MAAM;MACL;MACA;MACAH,YAAY,GAAG,yBAAyBD,GAAG,CAACK,MAAM,eAAeL,GAAG,CAACE,KACnE,EAAE;;IAENN,OAAO,CAACM,KAAK,CAACF,GAAG,CAAC;IAClB,OAAOC,YAAY;EACrB;EAAC;qBA7BUf,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAoB,SAAXpB,WAAW;IAAAqB,YAFV;EAAM","names":["catchError","environment","UserService","constructor","http","getToken","localStorage","getItem","get","apiEndpoint","subscribe","e","console","log","setItem","handleError","err","errorMessage","error","Error","message","status","factory","providedIn"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\core\\services\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, catchError, tap } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  async getToken() {\r\n    if (!localStorage.getItem(\"access_token\"))\r\n      return await this.http.get(`${environment.apiEndpoint}/token`).subscribe((e: any) => {\r\n        console.log(\"Data: \", e);\r\n        localStorage.setItem(\"access_token\", e);\r\n      }),\r\n        catchError(this.handleError);\r\n\r\n    return localStorage.getItem(\"access_token\")\r\n  }\r\n\r\n  private handleError(err: HttpErrorResponse) {\r\n    let errorMessage: string;\r\n    if (err.error instanceof Error) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      errorMessage = `An error occured: ${err.error.message}`;\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      errorMessage = `Backend returned code ${err.status}, body was: ${err.error\r\n        }`;\r\n    }\r\n    console.error(err);\r\n    return errorMessage;\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}