{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, tap } from \"rxjs\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthInterceptor {\n  constructor(http) {\n    this.http = http;\n  }\n  intercept(request, next) {\n    this.usertoken = sessionStorage.getItem(\"access_token\");\n    let tokenizeReq = request.clone({\n      setHeaders: {\n        Authorization: \"Bearer \" + this.usertoken\n      }\n    });\n    return next.handle(tokenizeReq);\n  }\n  getToken() {\n    const headers = new HttpHeaders({\n      \"Content-Type\": \"application/json\"\n    });\n    const url = `${environment.apiEndpoint}/token`;\n    return this.http.get(url, {\n      headers: headers\n    }).pipe(tap(data => console.log(\"Data: \" + JSON.stringify(data))), catchError(this.handleError));\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":"AAAA,SAA6CA,WAAW,QAAsC,sBAAsB;AAEpH,SAAqBC,UAAU,EAAmBC,GAAG,QAAQ,MAAM;AACnE,SAASC,WAAW,QAAQ,8BAA8B;;;AAG1D,OAAM,MAAOC,eAAe;EAIxBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EACxB;EAEAC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IAClD,IAAI,CAACC,SAAS,GAAGC,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC;IACvD,IAAIC,WAAW,GAAGL,OAAO,CAACM,KAAK,CAAC;MAC5BC,UAAU,EAAE;QACRC,aAAa,EAAE,SAAS,GAAG,IAAI,CAACN;;KAEvC,CAAC;IACF,OAAOD,IAAI,CAACQ,MAAM,CAACJ,WAAW,CAAC;EACnC;EAEAK,QAAQ;IACJ,MAAMC,OAAO,GAAG,IAAInB,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IACvE,MAAMoB,GAAG,GAAG,GAAGjB,WAAW,CAACkB,WAAW,QAAQ;IAC9C,OAAO,IAAI,CAACf,IAAI,CACXgB,GAAG,CAACF,GAAG,EAAE;MAAED,OAAO,EAAEA;IAAO,CAAE,CAAC,CAC9BI,IAAI,CACDrB,GAAG,CAACsB,IAAI,IAAIC,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC,CAAC,EACzDvB,UAAU,CAAC,IAAI,CAAC4B,WAAW,CAAC,CAC/B;EACT;EAAC;qBA1BQzB,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAA0B,SAAf1B,eAAe;EAAA","names":["HttpHeaders","catchError","tap","environment","AuthInterceptor","constructor","http","intercept","request","next","usertoken","sessionStorage","getItem","tokenizeReq","clone","setHeaders","Authorization","handle","getToken","headers","url","apiEndpoint","get","pipe","data","console","log","JSON","stringify","handleError","factory"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\core\\services\\auth-interceptor.ts"],"sourcesContent":["import { HttpClient, HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable, Injector } from \"@angular/core\";\r\nimport { Observable, catchError, switchMap, take, tap } from \"rxjs\";\r\nimport { environment } from \"src/environments/environment\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n\r\n    usertoken: any;\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        this.usertoken = sessionStorage.getItem(\"access_token\");\r\n        let tokenizeReq = request.clone({\r\n            setHeaders: {\r\n                Authorization: \"Bearer \" + this.usertoken\r\n            }\r\n        })\r\n        return next.handle(tokenizeReq);\r\n    }\r\n\r\n    getToken(): Observable<any> {\r\n        const headers = new HttpHeaders({ \"Content-Type\": \"application/json\" });\r\n        const url = `${environment.apiEndpoint}/token`;\r\n        return this.http\r\n            .get(url, { headers: headers })\r\n            .pipe(\r\n                tap(data => console.log(\"Data: \" + JSON.stringify(data))),\r\n                catchError(this.handleError)\r\n            );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}