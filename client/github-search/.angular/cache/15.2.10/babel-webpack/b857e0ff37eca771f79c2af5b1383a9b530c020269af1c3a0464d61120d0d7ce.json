{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthInterceptor {\n  constructor(http) {\n    this.http = http;\n  }\n  intercept(req, next) {\n    console.log(`AddTokenInterceptor - ${req.url}`);\n    let jsonReq = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`\n      }\n    });\n    return next.handle(jsonReq);\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,eAAe;EAIxBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EACxB;EAEAC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAC9CC,OAAO,CAACC,GAAG,CAAC,yBAAyBH,GAAG,CAACI,GAAG,EAAE,CAAC;IAE/C,IAAIC,OAAO,GAAqBL,GAAG,CAACM,KAAK,CAAC;MACxCC,UAAU,EAAC;QACTC,aAAa,EAAG,UAAUC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;;KAEjE,CAAC;IAEF,OAAOT,IAAI,CAACU,MAAM,CAACN,OAAO,CAAC;EAC7B;EAAC;qBAjBMT,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAgB,SAAfhB,eAAe;EAAA","names":["AuthInterceptor","constructor","http","intercept","req","next","console","log","url","jsonReq","clone","setHeaders","Authorization","localStorage","getItem","handle","factory"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\core\\services\\auth-interceptor.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable, Injector } from \"@angular/core\";\r\nimport { Observable, catchError, switchMap, take, tap } from \"rxjs\";\r\nimport { environment } from \"src/environments/environment\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n\r\n    usertoken: any;\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        console.log(`AddTokenInterceptor - ${req.url}`);\r\n        \r\n        let jsonReq: HttpRequest<any> = req.clone({\r\n          setHeaders:{\r\n            Authorization : `Bearer ${localStorage.getItem(\"access_token\")}`\r\n          }\r\n        });\r\n        \r\n        return next.handle(jsonReq);\r\n      }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}