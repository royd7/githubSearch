{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nexport class AuthInterceptor {\n  constructor(userService) {\n    this.userService = userService;\n  }\n  intercept(request, next) {\n    const token = localStorage.getItem('access_token') || this.userService.fetchToken();\n    const modifiedRequest = request.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return next.handle(modifiedRequest);\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.UserService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,eAAe;EAExBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAiB;EAEhDC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IAClD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI,CAACN,WAAW,CAACO,UAAU,EAAE;IACnF,MAAMC,eAAe,GAAGN,OAAO,CAACO,KAAK,CAAC;MAClCC,UAAU,EAAE;QAAEC,aAAa,EAAE,UAAUP,KAAK;MAAE;KACjD,CAAC;IACF,OAAOD,IAAI,CAACS,MAAM,CAACJ,eAAe,CAAC;EACvC;EAAC;qBAVQV,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAe,SAAff,eAAe;EAAA","names":["AuthInterceptor","constructor","userService","intercept","request","next","token","localStorage","getItem","fetchToken","modifiedRequest","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\core\\services\\auth-interceptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable, catchError, switchMap } from \"rxjs\";\r\nimport { UserService } from \"./user.service\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    constructor(private userService: UserService) { }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const token = localStorage.getItem('access_token') || this.userService.fetchToken();\r\n        const modifiedRequest = request.clone({\r\n            setHeaders: { Authorization: `Bearer ${token}` },\r\n        });\r\n        return next.handle(modifiedRequest);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}