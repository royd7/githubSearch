{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/user.service\";\nexport class AuthGuard {\n  constructor(router, accountService) {\n    this.router = router;\n    this.accountService = accountService;\n  }\n  canActivate(route, state) {\n    const account = this.accountService.token;\n    if (account) {\n      // logged in so return true\n      return true;\n    }\n    this.accountService.getActivate().subscribe(e => {\n      this.accountService.setActivate(e);\n    });\n    // not logged in so redirect to login page with the return url\n    return false;\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.UserService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAMA,OAAM,MAAOA,SAAS;EAClBC,YACYC,MAAc,EACdC,cAA2B;IAD3B,WAAM,GAAND,MAAM;IACN,mBAAc,GAAdC,cAAc;EACtB;EAEJC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACjE,MAAMC,OAAO,GAAG,IAAI,CAACJ,cAAc,CAACK,KAAK;IACzC,IAAID,OAAO,EAAE;MACT;MACA,OAAO,IAAI;;IAEf,IAAI,CAACJ,cAAc,CAACM,WAAW,EAAE,CAACC,SAAS,CAACC,CAAC,IAAE;MAC3C,IAAI,CAACR,cAAc,CAACS,WAAW,CAACD,CAAC,CAAC;IACtC,CAAC,CAAC;IACF;IACA,OAAO,KAAK;EAChB;EAAC;qBAjBQX,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAa,SAATb,SAAS;IAAAc,YADI;EAAM","names":["AuthGuard","constructor","router","accountService","canActivate","route","state","account","token","getActivate","subscribe","e","setActivate","factory","providedIn"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\src\\app\\_helpers\\auth-guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { UserService } from 'src/app/services/user.service';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthGuard implements CanActivate {\r\n    constructor(\r\n        private router: Router,\r\n        private accountService: UserService\r\n    ) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n        const account = this.accountService.token;\r\n        if (account) {\r\n            // logged in so return true\r\n            return true;\r\n        }\r\n        this.accountService.getActivate().subscribe(e=>{\r\n            this.accountService.setActivate(e);\r\n        });\r\n        // not logged in so redirect to login page with the return url\r\n        return false;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}