{"ast":null,"code":"import { catchError, switchMap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nexport class AuthInterceptor {\n  constructor(userService) {\n    this.userService = userService;\n  }\n  intercept(request, next) {\n    return this.userService.jwtToken$.pipe(switchMap(token => {\n      if (token) {\n        const clonedRequest = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        return next.handle(clonedRequest);\n      } else {\n        // If token is not available, initiate login\n        return this.userService.login().pipe(switchMap(() => {\n          const newToken = this.userService.jwtTokenSubject.value;\n          const clonedRequest = request.clone({\n            setHeaders: {\n              Authorization: `Bearer ${newToken}`\n            }\n          });\n          return next.handle(clonedRequest);\n        }), catchError(() => {\n          // Handle login error\n          return throwError('Unable to obtain JWT token');\n        }));\n      }\n    }));\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.UserService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,EAAEC,SAAS,EAAaC,UAAU,QAAQ,MAAM;;;AAK/E,OAAM,MAAOC,eAAe;EAExBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAC/B;EAGAC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IAClD,OAAO,IAAI,CAACH,WAAW,CAACI,SAAS,CAACC,IAAI,CAClCT,SAAS,CAAEU,KAAK,IAAI;MAChB,IAAIA,KAAK,EAAE;QACP,MAAMC,aAAa,GAAGL,OAAO,CAACM,KAAK,CAAC;UAChCC,UAAU,EAAE;YAAEC,aAAa,EAAE,UAAUJ,KAAK;UAAE;SACjD,CAAC;QACF,OAAOH,IAAI,CAACQ,MAAM,CAACJ,aAAa,CAAC;OACpC,MAAM;QACH;QACA,OAAO,IAAI,CAACP,WAAW,CAACY,KAAK,EAAE,CAACP,IAAI,CAChCT,SAAS,CAAC,MAAK;UACX,MAAMiB,QAAQ,GAAG,IAAI,CAACb,WAAW,CAACc,eAAe,CAACC,KAAK;UACvD,MAAMR,aAAa,GAAGL,OAAO,CAACM,KAAK,CAAC;YAChCC,UAAU,EAAE;cAAEC,aAAa,EAAE,UAAUG,QAAQ;YAAE;WACpD,CAAC;UACF,OAAOV,IAAI,CAACQ,MAAM,CAACJ,aAAa,CAAC;QACrC,CAAC,CAAC,EACFZ,UAAU,CAAC,MAAK;UACZ;UACA,OAAOE,UAAU,CAAC,4BAA4B,CAAC;QACnD,CAAC,CAAC,CACL;;IAET,CAAC,CAAC,CACL;EACL;EAAC;qBAhCQC,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAkB,SAAflB,eAAe;EAAA","names":["catchError","switchMap","throwError","AuthInterceptor","constructor","userService","intercept","request","next","jwtToken$","pipe","token","clonedRequest","clone","setHeaders","Authorization","handle","login","newToken","jwtTokenSubject","value","factory"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\src\\app\\services\\auth-interceptor.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable, Injector } from \"@angular/core\";\r\nimport { Observable, catchError, switchMap, take, tap, throwError } from \"rxjs\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { UserService } from \"./user.service\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    constructor(private userService: UserService) {\r\n    }\r\n\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return this.userService.jwtToken$.pipe(\r\n            switchMap((token) => {\r\n                if (token) {\r\n                    const clonedRequest = request.clone({\r\n                        setHeaders: { Authorization: `Bearer ${token}` },\r\n                    });\r\n                    return next.handle(clonedRequest);\r\n                } else {\r\n                    // If token is not available, initiate login\r\n                    return this.userService.login().pipe(\r\n                        switchMap(() => {\r\n                            const newToken = this.userService.jwtTokenSubject.value;\r\n                            const clonedRequest = request.clone({\r\n                                setHeaders: { Authorization: `Bearer ${newToken}` },\r\n                            });\r\n                            return next.handle(clonedRequest);\r\n                        }),\r\n                        catchError(() => {\r\n                            // Handle login error\r\n                            return throwError('Unable to obtain JWT token');\r\n                        })\r\n                    );\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}