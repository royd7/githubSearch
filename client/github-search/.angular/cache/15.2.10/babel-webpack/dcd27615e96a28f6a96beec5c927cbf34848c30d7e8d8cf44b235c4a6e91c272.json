{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  constructor(injector) {\n    this.injector = injector;\n  }\n  intercept(request, next) {\n    this.usertoken = sessionStorage.getItem(\"access_token\");\n    let tokenizeReq = request.clone({\n      setHeaders: {\n        Authorization: \"Bearer \" + this.usertoken\n      }\n    });\n    return next.handle(tokenizeReq);\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i0.Injector));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,eAAe;EAIxBC,YAAoBC,QAAkB;IAAlB,aAAQ,GAARA,QAAQ;EAC5B;EAEAC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IAClD,IAAI,CAACC,SAAS,GAAGC,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC;IACvD,IAAIC,WAAW,GAAGL,OAAO,CAACM,KAAK,CAAC;MAC5BC,UAAU,EAAE;QACRC,aAAa,EAAE,SAAS,GAAG,IAAI,CAACN;;KAEvC,CAAC;IACF,OAAOD,IAAI,CAACQ,MAAM,CAACJ,WAAW,CAAC;EACnC;EAAC;qBAfQT,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAc,SAAfd,eAAe;EAAA","names":["AuthInterceptor","constructor","injector","intercept","request","next","usertoken","sessionStorage","getItem","tokenizeReq","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\core\\services\\auth-interceptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable, Injector } from \"@angular/core\";\r\nimport { Observable, catchError, switchMap, take } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n\r\n    usertoken: any;\r\n    constructor(private injector: Injector) {\r\n    }\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        this.usertoken = sessionStorage.getItem(\"access_token\");\r\n        let tokenizeReq = request.clone({\r\n            setHeaders: {\r\n                Authorization: \"Bearer \" + this.usertoken\r\n            }\r\n        })\r\n        return next.handle(tokenizeReq);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}