{"ast":null,"code":"import { catchError, switchMap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nexport class AuthInterceptor {\n  constructor(userService) {\n    this.userService = userService;\n  }\n  intercept(req, next) {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Token found, attach to request\n      return this.attachTokenAndProceed(req, next, token);\n    } else {\n      // Token not found, try retrieving before proceeding\n      return this.fetchTokenAndProceed(req, next);\n    }\n  }\n  attachTokenAndProceed(req, next, token) {\n    const authReq = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return next.handle(authReq);\n  }\n  fetchTokenAndProceed(req, next) {\n    // Call a service to fetch the token from the API\n    return this.userService.fetchToken().pipe(switchMap(token => {\n      localStorage.setItem('token', token);\n      return this.attachTokenAndProceed(req, next, token);\n    }), catchError(error => {\n      // Handle token retrieval errors (e.g., redirect to login)\n      return this.handleUnauthorizedRequest(next, req);\n    }));\n  }\n  handleUnauthorizedRequest(next, req) {\n    // Handle unauthorized requests (e.g., redirect to login)\n    return next.handle(req);\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.UserService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,EAAEC,SAAS,QAAQ,MAAM;;;AAIxD,OAAM,MAAOC,eAAe;EAExBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAE/B;EAEAC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAC9C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAIF,KAAK,EAAE;MACP;MACA,OAAO,IAAI,CAACG,qBAAqB,CAACL,GAAG,EAAEC,IAAI,EAAEC,KAAK,CAAC;KACtD,MAAM;MACH;MACA,OAAO,IAAI,CAACI,oBAAoB,CAACN,GAAG,EAAEC,IAAI,CAAC;;EAEnD;EAEQI,qBAAqB,CAACL,GAAqB,EAAEC,IAAiB,EAAEC,KAAa;IACjF,MAAMK,OAAO,GAAGP,GAAG,CAACQ,KAAK,CAAC;MACtBC,UAAU,EAAE;QAAEC,aAAa,EAAE,UAAUR,KAAK;MAAE;KACjD,CAAC;IACF,OAAOD,IAAI,CAACU,MAAM,CAACJ,OAAO,CAAC;EAC/B;EAEQD,oBAAoB,CAACN,GAAqB,EAAEC,IAAiB;IACjE;IACA,OAAO,IAAI,CAACH,WAAW,CAACc,UAAU,EAAE,CAC/BC,IAAI,CACDlB,SAAS,CAAEO,KAAU,IAAI;MACrBC,YAAY,CAACW,OAAO,CAAC,OAAO,EAAEZ,KAAK,CAAC;MACpC,OAAO,IAAI,CAACG,qBAAqB,CAACL,GAAG,EAAEC,IAAI,EAAEC,KAAK,CAAC;IACvD,CAAC,CAAC,EACFR,UAAU,CAAEqB,KAAU,IAAI;MACtB;MACA,OAAO,IAAI,CAACC,yBAAyB,CAACf,IAAI,EAAED,GAAG,CAAC;IACpD,CAAC,CAAC,CACL;EACT;EAEQgB,yBAAyB,CAACf,IAAiB,EAAED,GAAqB;IACtE;IACA,OAAOC,IAAI,CAACU,MAAM,CAACX,GAAG,CAAC;EAC3B;EAAC;qBA3CQJ,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAqB,SAAfrB,eAAe;EAAA","names":["catchError","switchMap","AuthInterceptor","constructor","userService","intercept","req","next","token","localStorage","getItem","attachTokenAndProceed","fetchTokenAndProceed","authReq","clone","setHeaders","Authorization","handle","fetchToken","pipe","setItem","error","handleUnauthorizedRequest","factory"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\core\\services\\auth.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable, catchError, switchMap } from \"rxjs\";\r\nimport { UserService } from \"./user.service\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    constructor(private userService: UserService){\r\n\r\n    }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const token = localStorage.getItem('token');\r\n\r\n        if (token) {\r\n            // Token found, attach to request\r\n            return this.attachTokenAndProceed(req, next, token);\r\n        } else {\r\n            // Token not found, try retrieving before proceeding\r\n            return this.fetchTokenAndProceed(req, next);\r\n        }\r\n    }\r\n\r\n    private attachTokenAndProceed(req: HttpRequest<any>, next: HttpHandler, token: string): Observable<HttpEvent<any>> {\r\n        const authReq = req.clone({\r\n            setHeaders: { Authorization: `Bearer ${token}` }\r\n        });\r\n        return next.handle(authReq);\r\n    }\r\n\r\n    private fetchTokenAndProceed(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        // Call a service to fetch the token from the API\r\n        return this.userService.fetchToken()\r\n            .pipe(\r\n                switchMap((token: any) => {\r\n                    localStorage.setItem('token', token);\r\n                    return this.attachTokenAndProceed(req, next, token);\r\n                }),\r\n                catchError((error: any) => {\r\n                    // Handle token retrieval errors (e.g., redirect to login)\r\n                    return this.handleUnauthorizedRequest(next, req);\r\n                })\r\n            );\r\n    }\r\n\r\n    private handleUnauthorizedRequest(next: HttpHandler, req: HttpRequest<any>): Observable<HttpEvent<any>> {\r\n        // Handle unauthorized requests (e.g., redirect to login)\r\n        return next.handle(req);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}