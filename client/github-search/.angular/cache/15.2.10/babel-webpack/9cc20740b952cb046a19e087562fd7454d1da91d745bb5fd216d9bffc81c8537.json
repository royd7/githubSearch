{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http, handler) {\n    this.http = http;\n    this.baseUrl = `${environment.apiEndpoint}`;\n    this.http = new HttpClient(handler);\n  }\n  get(entity, params) {\n    return this.getData(`${this.baseUrl}/${entity}/${params}`);\n  }\n  post(entity, obj) {\n    return this.postData(`${this.baseUrl}/${entity}`, obj).pipe(map(x => {\n      return x;\n    }));\n  }\n  getData(url, realData = false) {\n    let get = this.http.get(url, {});\n    return get.pipe(map(d => {\n      return d;\n    }), catchError(err => {\n      return this.getData(url, true);\n    }));\n  }\n  postData(url, obj, realData = false) {\n    let post = this.http.post(obj, {});\n    return post.pipe(map(d => {\n      return d;\n    }), catchError(err => {\n      return this.postData(url, obj, true);\n    }));\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i1.HttpBackend));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAsBA,UAAU,QAAqB,sBAAsB;AAG3E,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAASC,WAAW,QAAQ,oCAAoC;;;AAOhE,OAAM,MAAOC,WAAW;EAItBC,YAAmBC,IAAgB,EAAEC,OAAoB;IAAtC,SAAI,GAAJD,IAAI;IAFhB,YAAO,GAAW,GAAGH,WAAW,CAACK,WAAW,EAAE;IAGnD,IAAI,CAACF,IAAI,GAAG,IAAIN,UAAU,CAACO,OAAO,CAAC;EACrC;EAEOE,GAAG,CAACC,MAAc,EAAEC,MAAc;IACvC,OAAO,IAAI,CAACC,OAAO,CAAC,GAAG,IAAI,CAACC,OAAO,IAAIH,MAAM,IAAIC,MAAM,EAAE,CAAC;EAC5D;EAEOG,IAAI,CAACJ,MAAc,EAAEK,GAAQ;IAClC,OAAO,IAAI,CAACC,QAAQ,CAAC,GAAG,IAAI,CAACH,OAAO,IAAIH,MAAM,EAAE,EAAEK,GAAG,CAAC,CACnDE,IAAI,CAACf,GAAG,CAACgB,CAAC,IAAG;MAAG,OAAOA,CAAC;IAAC,CAAC,CAAC,CAAC;EACjC;EAEAN,OAAO,CAACO,GAAW,EAAEC,WAAoB,KAAK;IAC5C,IAAIX,GAAG,GAAoB,IAAI,CAACH,IAAI,CAACG,GAAG,CAACU,GAAG,EAAE,EAAE,CAAC;IAEjD,OAAOV,GAAG,CAACQ,IAAI,CAACf,GAAG,CAACmB,CAAC,IAAG;MACtB,OAAOA,CAAC;IACV,CAAC,CAAC,EACApB,UAAU,CAACqB,GAAG,IAAG;MACf,OAAO,IAAI,CAACV,OAAO,CAACO,GAAG,EAAE,IAAI,CAAC;IAChC,CAAC,CAAC,CAAC;EACP;EAEAH,QAAQ,CAACG,GAAW,EAAEJ,GAAQ,EAAEK,WAAoB,KAAK;IAEvD,IAAIN,IAAI,GAAoB,IAAI,CAACR,IAAI,CAACQ,IAAI,CAACC,GAAG,EAAE,EAAE,CAAC;IAEnD,OAAOD,IAAI,CAACG,IAAI,CAACf,GAAG,CAACmB,CAAC,IAAG;MACvB,OAAOA,CAAC;IACV,CAAC,CAAC,EACApB,UAAU,CAACqB,GAAG,IAAG;MACf,OAAO,IAAI,CAACN,QAAQ,CAACG,GAAG,EAAEJ,GAAG,EAAE,IAAI,CAAC;IACtC,CAAC,CAAC,CAAC;EACP;EAAC;qBAtCUX,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAmB,SAAXnB,WAAW;IAAAoB,YAFV;EAAM","names":["HttpClient","catchError","map","environment","DataService","constructor","http","handler","apiEndpoint","get","entity","params","getData","baseUrl","post","obj","postData","pipe","x","url","realData","d","err","factory","providedIn"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\core\\services\\data.service.ts"],"sourcesContent":["import { HttpBackend, HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { EventEmitter, Injectable, Pipe, PipeTransform } from '@angular/core';\r\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { environment } from '../../src/environments/environment';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n\r\n  public baseUrl: string = `${environment.apiEndpoint}`;\r\n\r\n  constructor(public http: HttpClient, handler: HttpBackend) {\r\n    this.http = new HttpClient(handler);\r\n  }\r\n\r\n  public get(entity: string, params: string): Observable<any> {\r\n    return this.getData(`${this.baseUrl}/${entity}/${params}`);\r\n  }\r\n\r\n  public post(entity: string, obj: any): Observable<any> {\r\n    return this.postData(`${this.baseUrl}/${entity}`, obj)\r\n      .pipe(map(x => { return x }));\r\n  }\r\n\r\n  getData(url: string, realData: boolean = false): Observable<any> {\r\n    let get: Observable<any> = this.http.get(url, {});\r\n\r\n    return get.pipe(map(d => {\r\n      return d;\r\n    }),\r\n      catchError(err => {\r\n        return this.getData(url, true);\r\n      }));\r\n  }\r\n\r\n  postData(url: string, obj: any, realData: boolean = false): Observable<any> {\r\n\r\n    let post: Observable<any> = this.http.post(obj, {});\r\n\r\n    return post.pipe(map(d => {\r\n      return d;\r\n    }),\r\n      catchError(err => {\r\n        return this.postData(url, obj, true);\r\n      }));\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}