{"ast":null,"code":"import { switchMap, take } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nexport class AuthInterceptor {\n  constructor(userService) {\n    this.userService = userService;\n  }\n  intercept(request, next) {\n    return this.userService.token.pipe(take(1), switchMap(accessToken => {\n      if (accessToken) {\n        const clonedRequest = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        });\n        return next.handle(clonedRequest);\n      } else {\n        // If access token is not available, proceed with the original request\n        return next.handle(request);\n      }\n    }));\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.UserService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAiCA,SAAS,EAAEC,IAAI,QAAQ,MAAM;;;AAI9D,OAAM,MAAOC,eAAe;EAExBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAiB;EAEhDC,SAAS,CACLC,OAAyB,EACzBC,IAAiB;IAEjB,OAAO,IAAI,CAACH,WAAW,CAACI,KAAK,CAACC,IAAI,CAChCR,IAAI,CAAC,CAAC,CAAC,EACPD,SAAS,CAAEU,WAAW,IAAI;MACxB,IAAIA,WAAW,EAAE;QACf,MAAMC,aAAa,GAAGL,OAAO,CAACM,KAAK,CAAC;UAClCC,UAAU,EAAE;YAAEC,aAAa,EAAE,UAAUJ,WAAW;UAAE;SACrD,CAAC;QACF,OAAOH,IAAI,CAACQ,MAAM,CAACJ,aAAa,CAAC;OAClC,MAAM;QACL;QACA,OAAOJ,IAAI,CAACQ,MAAM,CAACT,OAAO,CAAC;;IAE/B,CAAC,CAAC,CACH;EACH;EAAC;qBAtBMJ,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAc,SAAfd,eAAe;EAAA","names":["switchMap","take","AuthInterceptor","constructor","userService","intercept","request","next","token","pipe","accessToken","clonedRequest","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\core\\services\\auth-interceptor.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable, catchError, switchMap, take } from \"rxjs\";\r\nimport { UserService } from \"./user.service\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    constructor(private userService: UserService) { }\r\n\r\n    intercept(\r\n        request: HttpRequest<any>,\r\n        next: HttpHandler\r\n      ): Observable<HttpEvent<any>> {\r\n        return this.userService.token.pipe(\r\n          take(1),\r\n          switchMap((accessToken) => {\r\n            if (accessToken) {\r\n              const clonedRequest = request.clone({\r\n                setHeaders: { Authorization: `Bearer ${accessToken}` },\r\n              });\r\n              return next.handle(clonedRequest);\r\n            } else {\r\n              // If access token is not available, proceed with the original request\r\n              return next.handle(request);\r\n            }\r\n          })\r\n        );\r\n      }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}