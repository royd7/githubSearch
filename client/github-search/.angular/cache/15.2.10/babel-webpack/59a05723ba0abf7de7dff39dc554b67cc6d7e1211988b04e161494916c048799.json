{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from \"../../../../environments/environment\";\nimport { tap, catchError } from \"rxjs/operators\";\nimport { ErrorObservable } from \"rxjs/observable/ErrorObservable\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TokenizerService {\n  ngOnInit() {}\n  constructor(http) {\n    this.http = http;\n  }\n  getToken() {\n    const headers = new HttpHeaders({\n      \"Content-Type\": \"application/json\"\n    });\n    const url = `${environment.tokenapi}`;\n    return this.http.post(url, {\n      userName: \"username\",\n      password: \"password\"\n    }, {\n      headers: headers\n    }).pipe(tap(data => console.log(\"Data: \" + JSON.stringify(data))), catchError(this.handleError));\n  }\n  handleError(err) {\n    let errorMessage;\n    if (err.error instanceof Error) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occured: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}, body was: ${err.error}`;\n    }\n    console.error(err);\n    return new ErrorObservable(errorMessage);\n  }\n  static #_ = this.ɵfac = function TokenizerService_Factory(t) {\n    return new (t || TokenizerService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenizerService,\n    factory: TokenizerService.ɵfac\n  });\n}","map":{"version":3,"mappings":"AAEA,SAEEA,WAAW,QAEN,sBAAsB;AAC7B,SAASC,WAAW,QAAQ,sCAAsC;AAClE,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;AAChD,SAASC,eAAe,QAAQ,iCAAiC;;;AAGjE,OAAM,MAAOC,gBAAgB;EAC3BC,QAAQ,IAAU;EAElBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAEvCC,QAAQ;IACN,MAAMC,OAAO,GAAG,IAAIV,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IACvE,MAAMW,GAAG,GAAG,GAAGV,WAAW,CAACW,QAAQ,EAAE;IACrC,OAAO,IAAI,CAACJ,IAAI,CACbK,IAAI,CACHF,GAAG,EACH;MAAEG,QAAQ,EAAE,UAAU;MAAEC,QAAQ,EAAE;IAAU,CAAE,EAC9C;MAAEL,OAAO,EAAEA;IAAO,CAAE,CACrB,CACAM,IAAI,CACHd,GAAG,CAACe,IAAI,IAAIC,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC,CAAC,EACzDd,UAAU,CAAC,IAAI,CAACmB,WAAW,CAAC,CAC7B;EACL;EAEQA,WAAW,CAACC,GAAsB;IACxC,IAAIC,YAAoB;IACxB,IAAID,GAAG,CAACE,KAAK,YAAYC,KAAK,EAAE;MAC9B;MACAF,YAAY,GAAG,qBAAqBD,GAAG,CAACE,KAAK,CAACE,OAAO,EAAE;KACxD,MAAM;MACL;MACA;MACAH,YAAY,GAAG,yBAAyBD,GAAG,CAACK,MAAM,eAChDL,GAAG,CAACE,KACN,EAAE;;IAEJP,OAAO,CAACO,KAAK,CAACF,GAAG,CAAC;IAClB,OAAO,IAAInB,eAAe,CAACoB,YAAY,CAAC;EAC1C;EAAC;qBAlCUnB,gBAAgB;EAAA;EAAA;WAAhBA,gBAAgB;IAAAwB,SAAhBxB,gBAAgB;EAAA","names":["HttpHeaders","environment","tap","catchError","ErrorObservable","TokenizerService","ngOnInit","constructor","http","getToken","headers","url","tokenapi","post","userName","password","pipe","data","console","log","JSON","stringify","handleError","err","errorMessage","error","Error","message","status","factory"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\core\\services\\auth-interceptor.ts"],"sourcesContent":["import { OnInit, Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport {\r\n  HttpClient,\r\n  HttpHeaders,\r\n  HttpErrorResponse\r\n} from \"@angular/common/http\";\r\nimport { environment } from \"../../../../environments/environment\";\r\nimport { tap, catchError } from \"rxjs/operators\";\r\nimport { ErrorObservable } from \"rxjs/observable/ErrorObservable\";\r\n\r\n@Injectable()\r\nexport class TokenizerService implements OnInit {\r\n  ngOnInit(): void {}\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getToken(): Observable<any> {\r\n    const headers = new HttpHeaders({ \"Content-Type\": \"application/json\" });\r\n    const url = `${environment.tokenapi}`;\r\n    return this.http\r\n      .post(\r\n        url,\r\n        { userName: \"username\", password: \"password\" },\r\n        { headers: headers }\r\n      )\r\n      .pipe(\r\n        tap(data => console.log(\"Data: \" + JSON.stringify(data))),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  private handleError(err: HttpErrorResponse): ErrorObservable {\r\n    let errorMessage: string;\r\n    if (err.error instanceof Error) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      errorMessage = `An error occured: ${err.error.message}`;\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      errorMessage = `Backend returned code ${err.status}, body was: ${\r\n        err.error\r\n      }`;\r\n    }\r\n    console.error(err);\r\n    return new ErrorObservable(errorMessage);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}