{"ast":null,"code":"import { UserService } from \"./user.service\";\nimport * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  constructor(injector) {\n    this.injector = injector;\n  }\n  intercept(req, next) {\n    console.log('Intercepted!', req);\n    const authService = this.injector.get(UserService);\n    const copiedReq = req.clone({\n      headers: req.headers.set('authorization', 'Bearer ' + authService.data?.token)\n    });\n    if (!authService.data?.token) {\n      {}\n    }\n    return next.handle(copiedReq);\n  }\n  static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i0.Injector));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":"AAIA,SAASA,WAAW,QAAQ,gBAAgB;;AAG5C,OAAM,MAAOC,eAAe;EAExBC,YAAoBC,QAAkB;IAAlB,aAAQ,GAARA,QAAQ;EAC5B;EAEAC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAC9CC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEH,GAAG,CAAC;IAChC,MAAMI,WAAW,GAAG,IAAI,CAACN,QAAQ,CAACO,GAAG,CAACV,WAAW,CAAC;IAClD,MAAMW,SAAS,GAAGN,GAAG,CAACO,KAAK,CAAC;MACxBC,OAAO,EAAER,GAAG,CAACQ,OAAO,CAACC,GAAG,CACpB,eAAe,EAAE,SAAS,GAAGL,WAAW,CAACM,IAAI,EAAEC,KAAK;KAE3D,CAAC;IAEF,IAAI,CAACP,WAAW,CAACM,IAAI,EAAEC,KAAK,EAAE;MAC1B;;IAKJ,OAAOV,IAAI,CAACW,MAAM,CAACN,SAAS,CAAC;EACjC;EAAC;qBArBQV,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAiB,SAAfjB,eAAe;EAAA","names":["UserService","AuthInterceptor","constructor","injector","intercept","req","next","console","log","authService","get","copiedReq","clone","headers","set","data","token","handle","factory"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\src\\app\\services\\auth-interceptor.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable, Injector } from \"@angular/core\";\r\nimport { Observable, catchError, switchMap, take, tap } from \"rxjs\";\r\nimport { environment } from \"src/environments/environment\";\r\nimport { UserService } from \"./user.service\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    constructor(private injector: Injector) {\r\n    }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        console.log('Intercepted!', req);\r\n        const authService = this.injector.get(UserService);\r\n        const copiedReq = req.clone({\r\n            headers: req.headers.set(\r\n                'authorization', 'Bearer ' + authService.data?.token\r\n            )\r\n        });\r\n\r\n        if (!authService.data?.token) {\r\n            {\r\n\r\n            }\r\n        }\r\n\r\n        return next.handle(copiedReq);\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}