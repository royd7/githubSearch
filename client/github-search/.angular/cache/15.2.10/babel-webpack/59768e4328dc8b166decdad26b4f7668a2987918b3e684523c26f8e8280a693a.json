{"ast":null,"code":"import { map, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.token = null;\n    // Call the login method during service initialization\n    this.login().subscribe(() => {\n      console.log('Login successful');\n    }, error => {\n      console.error('Login failed:', error);\n    });\n  }\n  login() {\n    // Simulate a login process and obtain a JWT token from the server\n    return this.http.get(`${environment.apiEndpoint}/token`).pipe(tap(response => {\n      const token = response.token;\n      this.setToken(token);\n    }));\n  }\n  isAuthenticated() {\n    // Check if the user is authenticated (e.g., check if a token is available)\n    return this.jwtToken$.pipe(map(token => !!token));\n  }\n  setToken(token) {\n    this.jwtTokenSubject.next(token);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAkDA,GAAG,EAAEC,GAAG,QAAQ,MAAM;AACxE,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB,UAAK,GAAkB,IAAI;IAGzB;IACA,IAAI,CAACC,KAAK,EAAE,CAACC,SAAS,CACpB,MAAK;MACHC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IACjC,CAAC,EACAC,KAAK,IAAI;MACRF,OAAO,CAACE,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC,CAAC,CACF;EACH;EAEAJ,KAAK;IACH;IACA,OAAO,IAAI,CAACD,IAAI,CAACM,GAAG,CAAM,GAAGT,WAAW,CAACU,WAAW,QAAQ,CAAC,CAACC,IAAI,CAChEZ,GAAG,CAAEa,QAAQ,IAAI;MACf,MAAMC,KAAK,GAAGD,QAAQ,CAACC,KAAK;MAC5B,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC;IACtB,CAAC,CAAC,CACH;EACH;EAEAE,eAAe;IACb;IACA,OAAO,IAAI,CAACC,SAAS,CAACL,IAAI,CAACb,GAAG,CAAEe,KAAK,IAAK,CAAC,CAACA,KAAK,CAAC,CAAC;EACrD;EAEAC,QAAQ,CAACD,KAAa;IACpB,IAAI,CAACI,eAAe,CAACC,IAAI,CAACL,KAAK,CAAC;EAClC;EAAC;qBAlCUZ,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAkB,SAAXlB,WAAW;IAAAmB,YAFV;EAAM","names":["map","tap","environment","UserService","constructor","http","login","subscribe","console","log","error","get","apiEndpoint","pipe","response","token","setToken","isAuthenticated","jwtToken$","jwtTokenSubject","next","factory","providedIn"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, catchError, map, tap } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n\r\n  token: string | null = null;\r\n\r\n  constructor(private http: HttpClient) {\r\n    // Call the login method during service initialization\r\n    this.login().subscribe(\r\n      () => {\r\n        console.log('Login successful');\r\n      },\r\n      (error) => {\r\n        console.error('Login failed:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  login(): Observable<any> {\r\n    // Simulate a login process and obtain a JWT token from the server\r\n    return this.http.get<any>(`${environment.apiEndpoint}/token`).pipe(\r\n      tap((response) => {\r\n        const token = response.token;\r\n        this.setToken(token);\r\n      })\r\n    );\r\n  }\r\n\r\n  isAuthenticated(): Observable<boolean> {\r\n    // Check if the user is authenticated (e.g., check if a token is available)\r\n    return this.jwtToken$.pipe(map((token) => !!token));\r\n  }\r\n\r\n  setToken(token: string): void {\r\n    this.jwtTokenSubject.next(token);\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}