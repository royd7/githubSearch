{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.accessTokenSubject = new BehaviorSubject(null);\n    this.accessToken$ = this.accessTokenSubject.asObservable();\n    const storedToken = localStorage.getItem('access_token');\n    this.accessTokenSubject.next(storedToken);\n    // Fetch and update the access token\n    this.fetchToken().subscribe(data => {\n      const token = data.token;\n      localStorage.setItem('access_token', token);\n      this.accessTokenSubject.next(token);\n    }, error => {\n      console.error('Error fetching token:', error);\n      this.accessTokenSubject.next(null);\n    });\n  }\n  fetchToken() {\n    return this.http.get(`${environment.apiEndpoint}/token`);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,WAAW,QAAQ,8BAA8B;;;AAK1D,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,uBAAkB,GAAG,IAAIJ,eAAe,CAAgB,IAAI,CAAC;IACrE,iBAAY,GAAG,IAAI,CAACK,kBAAkB,CAACC,YAAY,EAAE;IAInD,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACxD,IAAI,CAACJ,kBAAkB,CAACK,IAAI,CAACH,WAAW,CAAC;IAEzC;IACA,IAAI,CAACI,UAAU,EAAE,CAACC,SAAS,CACxBC,IAAI,IAAI;MACP,MAAMC,KAAK,GAAGD,IAAI,CAACC,KAAK;MACxBN,YAAY,CAACO,OAAO,CAAC,cAAc,EAAED,KAAK,CAAC;MAC3C,IAAI,CAACT,kBAAkB,CAACK,IAAI,CAACI,KAAK,CAAC;IACrC,CAAC,EACAE,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,IAAI,CAACX,kBAAkB,CAACK,IAAI,CAAC,IAAI,CAAC;IACpC,CAAC,CACF;EACH;EAEQC,UAAU;IAChB,OAAO,IAAI,CAACP,IAAI,CAACc,GAAG,CAAM,GAAGjB,WAAW,CAACkB,WAAW,QAAQ,CAAC;EAC/D;EAAC;qBA1BUjB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAkB,SAAXlB,WAAW;IAAAmB,YAFV;EAAM","names":["BehaviorSubject","environment","UserService","constructor","http","accessTokenSubject","asObservable","storedToken","localStorage","getItem","next","fetchToken","subscribe","data","token","setItem","error","console","get","apiEndpoint","factory","providedIn"],"sourceRoot":"","sources":["C:\\projects\\githubSearch\\client\\github-search\\core\\services\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  private accessTokenSubject = new BehaviorSubject<string | null>(null);\r\n  accessToken$ = this.accessTokenSubject.asObservable();\r\n  \r\n  constructor(private http: HttpClient) {\r\n\r\n    const storedToken = localStorage.getItem('access_token');\r\n    this.accessTokenSubject.next(storedToken);\r\n\r\n    // Fetch and update the access token\r\n    this.fetchToken().subscribe(\r\n      (data) => {\r\n        const token = data.token;\r\n        localStorage.setItem('access_token', token);\r\n        this.accessTokenSubject.next(token);\r\n      },\r\n      (error) => {\r\n        console.error('Error fetching token:', error);\r\n        this.accessTokenSubject.next(null);\r\n      }\r\n    );\r\n  }\r\n\r\n  private fetchToken(): Observable<any> {\r\n    return this.http.get<any>(`${environment.apiEndpoint}/token`);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}